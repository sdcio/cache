// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: cache.proto

// import "google/protobuf/any.proto";

package cachepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cache_InstanceCreate_FullMethodName        = "/cache.proto.Cache/InstanceCreate"
	Cache_InstancesList_FullMethodName         = "/cache.proto.Cache/InstancesList"
	Cache_InstanceDelete_FullMethodName        = "/cache.proto.Cache/InstanceDelete"
	Cache_InstanceIntentsList_FullMethodName   = "/cache.proto.Cache/InstanceIntentsList"
	Cache_InstanceIntentsGetAll_FullMethodName = "/cache.proto.Cache/InstanceIntentsGetAll"
	Cache_InstanceIntentGet_FullMethodName     = "/cache.proto.Cache/InstanceIntentGet"
	Cache_InstanceIntentExists_FullMethodName  = "/cache.proto.Cache/InstanceIntentExists"
	Cache_InstanceIntentModify_FullMethodName  = "/cache.proto.Cache/InstanceIntentModify"
	Cache_InstanceIntentDelete_FullMethodName  = "/cache.proto.Cache/InstanceIntentDelete"
)

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheClient interface {
	// Create cache instance
	InstanceCreate(ctx context.Context, in *InstanceCreateRequest, opts ...grpc.CallOption) (*InstanceCreateResponse, error)
	// List cache instances
	InstancesList(ctx context.Context, in *InstancesListRequest, opts ...grpc.CallOption) (*InstancesListResponse, error)
	// List the cache specific Intents
	InstanceDelete(ctx context.Context, in *InstanceDeleteRequest, opts ...grpc.CallOption) (*InstanceDeleteResponse, error)
	// Delete a cache instance specific intent
	InstanceIntentsList(ctx context.Context, in *InstanceIntentsListRequest, opts ...grpc.CallOption) (*InstanceIntentsListResponse, error)
	InstanceIntentsGetAll(ctx context.Context, in *InstanceIntentGetAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstanceIntentGetResponse], error)
	// Get a cache specific Intent
	InstanceIntentGet(ctx context.Context, in *InstanceIntentGetRequest, opts ...grpc.CallOption) (*InstanceIntentGetResponse, error)
	// Check existence of a cache specifc intent
	InstanceIntentExists(ctx context.Context, in *InstanceIntentExistsRequest, opts ...grpc.CallOption) (*InstanceIntentExistsResponse, error)
	// Modify a cache specifc intent (add / modify)
	InstanceIntentModify(ctx context.Context, in *InstanceIntentModifyRequest, opts ...grpc.CallOption) (*InstanceIntentModifyResponse, error)
	// Delete a cache instance
	InstanceIntentDelete(ctx context.Context, in *InstanceIntentDeleteRequest, opts ...grpc.CallOption) (*InstanceIntentDeleteResponse, error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) InstanceCreate(ctx context.Context, in *InstanceCreateRequest, opts ...grpc.CallOption) (*InstanceCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceCreateResponse)
	err := c.cc.Invoke(ctx, Cache_InstanceCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) InstancesList(ctx context.Context, in *InstancesListRequest, opts ...grpc.CallOption) (*InstancesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstancesListResponse)
	err := c.cc.Invoke(ctx, Cache_InstancesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) InstanceDelete(ctx context.Context, in *InstanceDeleteRequest, opts ...grpc.CallOption) (*InstanceDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceDeleteResponse)
	err := c.cc.Invoke(ctx, Cache_InstanceDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) InstanceIntentsList(ctx context.Context, in *InstanceIntentsListRequest, opts ...grpc.CallOption) (*InstanceIntentsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceIntentsListResponse)
	err := c.cc.Invoke(ctx, Cache_InstanceIntentsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) InstanceIntentsGetAll(ctx context.Context, in *InstanceIntentGetAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstanceIntentGetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[0], Cache_InstanceIntentsGetAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InstanceIntentGetAllRequest, InstanceIntentGetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cache_InstanceIntentsGetAllClient = grpc.ServerStreamingClient[InstanceIntentGetResponse]

func (c *cacheClient) InstanceIntentGet(ctx context.Context, in *InstanceIntentGetRequest, opts ...grpc.CallOption) (*InstanceIntentGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceIntentGetResponse)
	err := c.cc.Invoke(ctx, Cache_InstanceIntentGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) InstanceIntentExists(ctx context.Context, in *InstanceIntentExistsRequest, opts ...grpc.CallOption) (*InstanceIntentExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceIntentExistsResponse)
	err := c.cc.Invoke(ctx, Cache_InstanceIntentExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) InstanceIntentModify(ctx context.Context, in *InstanceIntentModifyRequest, opts ...grpc.CallOption) (*InstanceIntentModifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceIntentModifyResponse)
	err := c.cc.Invoke(ctx, Cache_InstanceIntentModify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) InstanceIntentDelete(ctx context.Context, in *InstanceIntentDeleteRequest, opts ...grpc.CallOption) (*InstanceIntentDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceIntentDeleteResponse)
	err := c.cc.Invoke(ctx, Cache_InstanceIntentDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServer is the server API for Cache service.
// All implementations must embed UnimplementedCacheServer
// for forward compatibility.
type CacheServer interface {
	// Create cache instance
	InstanceCreate(context.Context, *InstanceCreateRequest) (*InstanceCreateResponse, error)
	// List cache instances
	InstancesList(context.Context, *InstancesListRequest) (*InstancesListResponse, error)
	// List the cache specific Intents
	InstanceDelete(context.Context, *InstanceDeleteRequest) (*InstanceDeleteResponse, error)
	// Delete a cache instance specific intent
	InstanceIntentsList(context.Context, *InstanceIntentsListRequest) (*InstanceIntentsListResponse, error)
	InstanceIntentsGetAll(*InstanceIntentGetAllRequest, grpc.ServerStreamingServer[InstanceIntentGetResponse]) error
	// Get a cache specific Intent
	InstanceIntentGet(context.Context, *InstanceIntentGetRequest) (*InstanceIntentGetResponse, error)
	// Check existence of a cache specifc intent
	InstanceIntentExists(context.Context, *InstanceIntentExistsRequest) (*InstanceIntentExistsResponse, error)
	// Modify a cache specifc intent (add / modify)
	InstanceIntentModify(context.Context, *InstanceIntentModifyRequest) (*InstanceIntentModifyResponse, error)
	// Delete a cache instance
	InstanceIntentDelete(context.Context, *InstanceIntentDeleteRequest) (*InstanceIntentDeleteResponse, error)
	mustEmbedUnimplementedCacheServer()
}

// UnimplementedCacheServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCacheServer struct{}

func (UnimplementedCacheServer) InstanceCreate(context.Context, *InstanceCreateRequest) (*InstanceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceCreate not implemented")
}
func (UnimplementedCacheServer) InstancesList(context.Context, *InstancesListRequest) (*InstancesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstancesList not implemented")
}
func (UnimplementedCacheServer) InstanceDelete(context.Context, *InstanceDeleteRequest) (*InstanceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceDelete not implemented")
}
func (UnimplementedCacheServer) InstanceIntentsList(context.Context, *InstanceIntentsListRequest) (*InstanceIntentsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceIntentsList not implemented")
}
func (UnimplementedCacheServer) InstanceIntentsGetAll(*InstanceIntentGetAllRequest, grpc.ServerStreamingServer[InstanceIntentGetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method InstanceIntentsGetAll not implemented")
}
func (UnimplementedCacheServer) InstanceIntentGet(context.Context, *InstanceIntentGetRequest) (*InstanceIntentGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceIntentGet not implemented")
}
func (UnimplementedCacheServer) InstanceIntentExists(context.Context, *InstanceIntentExistsRequest) (*InstanceIntentExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceIntentExists not implemented")
}
func (UnimplementedCacheServer) InstanceIntentModify(context.Context, *InstanceIntentModifyRequest) (*InstanceIntentModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceIntentModify not implemented")
}
func (UnimplementedCacheServer) InstanceIntentDelete(context.Context, *InstanceIntentDeleteRequest) (*InstanceIntentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceIntentDelete not implemented")
}
func (UnimplementedCacheServer) mustEmbedUnimplementedCacheServer() {}
func (UnimplementedCacheServer) testEmbeddedByValue()               {}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	// If the following call pancis, it indicates UnimplementedCacheServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_InstanceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).InstanceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_InstanceCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).InstanceCreate(ctx, req.(*InstanceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_InstancesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstancesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).InstancesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_InstancesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).InstancesList(ctx, req.(*InstancesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_InstanceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).InstanceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_InstanceDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).InstanceDelete(ctx, req.(*InstanceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_InstanceIntentsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceIntentsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).InstanceIntentsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_InstanceIntentsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).InstanceIntentsList(ctx, req.(*InstanceIntentsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_InstanceIntentsGetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstanceIntentGetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).InstanceIntentsGetAll(m, &grpc.GenericServerStream[InstanceIntentGetAllRequest, InstanceIntentGetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cache_InstanceIntentsGetAllServer = grpc.ServerStreamingServer[InstanceIntentGetResponse]

func _Cache_InstanceIntentGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceIntentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).InstanceIntentGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_InstanceIntentGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).InstanceIntentGet(ctx, req.(*InstanceIntentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_InstanceIntentExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceIntentExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).InstanceIntentExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_InstanceIntentExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).InstanceIntentExists(ctx, req.(*InstanceIntentExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_InstanceIntentModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceIntentModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).InstanceIntentModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_InstanceIntentModify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).InstanceIntentModify(ctx, req.(*InstanceIntentModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_InstanceIntentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceIntentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).InstanceIntentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_InstanceIntentDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).InstanceIntentDelete(ctx, req.(*InstanceIntentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache.proto.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstanceCreate",
			Handler:    _Cache_InstanceCreate_Handler,
		},
		{
			MethodName: "InstancesList",
			Handler:    _Cache_InstancesList_Handler,
		},
		{
			MethodName: "InstanceDelete",
			Handler:    _Cache_InstanceDelete_Handler,
		},
		{
			MethodName: "InstanceIntentsList",
			Handler:    _Cache_InstanceIntentsList_Handler,
		},
		{
			MethodName: "InstanceIntentGet",
			Handler:    _Cache_InstanceIntentGet_Handler,
		},
		{
			MethodName: "InstanceIntentExists",
			Handler:    _Cache_InstanceIntentExists_Handler,
		},
		{
			MethodName: "InstanceIntentModify",
			Handler:    _Cache_InstanceIntentModify_Handler,
		},
		{
			MethodName: "InstanceIntentDelete",
			Handler:    _Cache_InstanceIntentDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstanceIntentsGetAll",
			Handler:       _Cache_InstanceIntentsGetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cache.proto",
}
